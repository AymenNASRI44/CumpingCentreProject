pipeline {
    agent any

    environment {
        COMPOSE_CMD = 'docker compose' // Change à 'docker-compose' si nécessaire
    }

    stages {

        stage('Préparation') {
            steps {
                script {
                    // Vérifie que le fichier docker-compose.yml est bien présent
                    sh 'ls -l docker compose.yml'
                    
                    // Vérifie la validité du fichier docker-compose.yml
                    sh "${COMPOSE_CMD} config"
                }
            }
        }

        stage('Run Conteneurs') {
            steps {
                script {
                    echo "Lancement des conteneurs en mode détaché..."
                    sh "${COMPOSE_CMD} up -d"
                }
            }
        }

        stage('Tests') {
            steps {
                script {
                    echo "Exécution des tests Symfony..."
                    // Utilise 'app' comme nom du service pour exécuter les commandes dans Symfony
                    sh "${COMPOSE_CMD} ps"
                    sh "${COMPOSE_CMD} exec symfony_app php bin/console doctrine:migrations:migrate --no-interaction "
                    sh "${COMPOSE_CMD} exec symfony_app php bin/phpunit"
                }
            }
        }

        stage('Déploiement') {
            steps {
                script {
                    echo "Arrêt et reconstruction des conteneurs..."
                    sh "${COMPOSE_CMD} down"
                    sh "${COMPOSE_CMD} up -d --build"
                }
            }
        }
    }

    post {
        failure {
            echo "❌ Le déploiement a échoué. Consultez les logs pour plus de détails."
        }
        success {
            echo "✅ Déploiement réussi !"
        }
    }
}
