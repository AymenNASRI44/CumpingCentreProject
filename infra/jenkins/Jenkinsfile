pipeline {
    agent any

    environment {
        DOCKER_COMPOSE = 'docker-compose'
        PROJECT_NAME = 'projetC'
    }

    stages {
        // Étape 1: Build des images Docker
        stage('Build Docker') {
            steps {
                script {
                    sh "${DOCKER_COMPOSE} -p ${PROJECT_NAME} build"
                }
            }
        }

        // Étape 2: Lancement des containers et installation des dépendances
        stage('Start Containers & Install Dependencies') {
            steps {
                script {
                    // Démarrer les services (MySQL, Nginx, etc.)
                    sh "${DOCKER_COMPOSE} -p ${PROJECT_NAME} up -d database"
                    sh "${DOCKER_COMPOSE} -p ${PROJECT_NAME} up -d app"

                    // Installer les dépendances Composer
                    sh "${DOCKER_COMPOSE} -p ${PROJECT_NAME} exec app composer install --no-interaction"

                    // Exécuter les migrations (si nécessaire)
                    sh "${DOCKER_COMPOSE} -p ${PROJECT_NAME} exec app php bin/console doctrine:migrations:migrate --no-interaction"
                }
            }
        }

        // Étape 3: Exécution des tests (PHPUnit)
        stage('Run Tests') {
            steps {
                script {
                    sh "${DOCKER_COMPOSE} -p ${PROJECT_NAME} exec app php bin/phpunit"
                }
            }
        }

        // Étape 4: Build des assets (Webpack Encore si utilisé)
        stage('Build Assets') {
            when {
                expression { fileExists('webpack.config.js') }
            }
            steps {
                script {
                    sh "${DOCKER_COMPOSE} -p ${PROJECT_NAME} exec app yarn install"
                    sh "${DOCKER_COMPOSE} -p ${PROJECT_NAME} exec app yarn build"
                }
            }
        }

        // Étape 5: Déploiement (exemple : redémarrer les services)
        stage('Deploy') {
            steps {
                script {
                    // Redémarrer Nginx pour appliquer les changements
                    sh "${DOCKER_COMPOSE} -p ${PROJECT_NAME} restart web"
                }
            }
        }
    }

    // Nettoyage après exécution
    post {
        always {
            script {
                // Arrêter les containers (optionnel, selon vos besoins)
                sh "${DOCKER_COMPOSE} -p ${PROJECT_NAME} down || true"
            }
            cleanWs() // Nettoyer le workspace Jenkins
        }
    }
}